5.5. 
А. Спроектируйте последовательный сумматор; заголовок модуля и временная диаграмма (см. task 5_5.PNG) показаны ниже. Сумматор складывает два 6-битных числа. Каждое число поступает по одному биту (сначала младший). Создайте экземпляры необходимых модулей (полный сумматор, триггеры, регистры, конечный автомат и прочее), соедините их и продемонстрируйте работу в тестовом окружении. 

Входы а и b - складываемые биты. Установка сигнала start обозначает момент времени, когда на входах появляются первые (младшие) биты. Сумма запоминается во внутреннем регистре sum. Установка сигнала done говорит, что на выходе sum находится окончательная 6-битная сумма и что значимы другие выходные сигналы (cout, zero, ... ). Все входные и выходные сигналы устанавливаются на один такт.

Отметим, что сумма первых двух битов а и b помещается в первый бит регистра sum (1-я сумма). На следующем такте вычисляется сумма следующих битов а и b, а также бита переноса от предыдущего суммирования; результат записывается во второй бит регистра sum (2-я сумма). Так продолжается, пока во внутреннем регистре (sum) не окажется сумма всех 6 пар битов. Установленный сигнал done говорит, что суммирование завершено и на выходе sum находится результат. Ниже приведено определение портов модуля:

module serialAdder
(input logic а, b, start, reset, clock,
output logic [5:0] sum,
output logic done , cout, zero, neg, twosOFlow);

В. Измените протокол (и модель) так, чтобы окончательная сумма, done и прочие сигналы (cout, zero, ... ) были значимы на один такт раньше, как и первая
установка start.